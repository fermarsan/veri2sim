
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftANDORleftEQEQNEQleftLTLEGTGEleftBITANDBITORBITXORleftLSHIFTRSHIFTrightNOTBITNOTALWAYS AND ASSIGN BEGIN BITAND BITNOT BITOR BITXOR CASE COMMA DEFAULT DIVIDE ELSE END ENDCASE ENDFUNCTION ENDMODULE ENDTASK EQ EQEQ FOR FOREVER FUNCTION GE GT IDENTIFIER IF INITIAL INPUT LBRACE LE LPAREN LSHIFT LT MINUS MODULE NEGEDGE NEQ NOT NUMBER OR OUTPUT PLUS POSEDGE RBRACE REG REPEAT RPAREN RSHIFT SEMI TASK TIMES WHILE WIREmodule : MODULE IDENTIFIER LPAREN port_list RPAREN SEMI module_items ENDMODULEport_list : port\n                 | port_list COMMA portport : INPUT IDENTIFIER\n            | OUTPUT IDENTIFIERmodule_items : module_item\n                    | module_items module_itemmodule_item : wire_declaration\n                   | assignmentwire_declaration : WIRE IDENTIFIER SEMIassignment : ASSIGN IDENTIFIER EQ expression SEMIexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression AND expression\n                  | expression OR expression\n                  | expression EQEQ expression\n                  | expression NEQ expression\n                  | expression LT expression\n                  | expression LE expression\n                  | expression GT expression\n                  | expression GE expression\n                  | expression BITAND expression\n                  | expression BITOR expression\n                  | expression BITXOR expression\n                  | expression LSHIFT expression\n                  | expression RSHIFT expressionexpression : MINUS expression %prec NOT\n                  | NOT expression\n                  | BITNOT expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : IDENTIFIER'
    
_lr_action_items = {'MODULE':([0,],[2,]),'$end':([1,21,],[0,-1,]),'IDENTIFIER':([2,7,8,19,20,26,29,30,31,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,],[3,11,12,23,24,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'LPAREN':([3,26,29,30,31,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,],[4,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'INPUT':([4,10,],[7,7,]),'OUTPUT':([4,10,],[8,8,]),'RPAREN':([5,6,11,12,14,27,33,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[9,-2,-4,-5,-3,-34,-33,-29,-30,-31,73,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-32,]),'COMMA':([5,6,11,12,14,],[10,-2,-4,-5,-3,]),'SEMI':([9,23,27,28,33,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[13,25,-34,34,-33,-29,-30,-31,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-32,]),'WIRE':([13,15,16,17,18,22,25,34,],[19,19,-6,-8,-9,-7,-10,-11,]),'ASSIGN':([13,15,16,17,18,22,25,34,],[20,20,-6,-8,-9,-7,-10,-11,]),'ENDMODULE':([15,16,17,18,22,25,34,],[21,-6,-8,-9,-7,-10,-11,]),'EQ':([24,],[26,]),'MINUS':([26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[29,-34,36,29,29,29,29,-33,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-29,-30,-31,36,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-32,]),'NOT':([26,29,30,31,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'BITNOT':([26,29,30,31,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'NUMBER':([26,29,30,31,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'PLUS':([27,28,33,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-34,35,-33,-29,-30,-31,35,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-32,]),'TIMES':([27,28,33,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-34,37,-33,-29,-30,-31,37,37,37,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-32,]),'DIVIDE':([27,28,33,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-34,38,-33,-29,-30,-31,38,38,38,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-32,]),'AND':([27,28,33,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-34,39,-33,-29,-30,-31,39,39,39,39,39,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-32,]),'OR':([27,28,33,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-34,40,-33,-29,-30,-31,40,40,40,40,40,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-32,]),'EQEQ':([27,28,33,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-34,41,-33,-29,-30,-31,41,41,41,41,41,41,41,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-32,]),'NEQ':([27,28,33,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-34,42,-33,-29,-30,-31,42,42,42,42,42,42,42,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-32,]),'LT':([27,28,33,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-34,43,-33,-29,-30,-31,43,43,43,43,43,43,43,43,43,-20,-21,-22,-23,-24,-25,-26,-27,-28,-32,]),'LE':([27,28,33,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-34,44,-33,-29,-30,-31,44,44,44,44,44,44,44,44,44,-20,-21,-22,-23,-24,-25,-26,-27,-28,-32,]),'GT':([27,28,33,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-34,45,-33,-29,-30,-31,45,45,45,45,45,45,45,45,45,-20,-21,-22,-23,-24,-25,-26,-27,-28,-32,]),'GE':([27,28,33,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-34,46,-33,-29,-30,-31,46,46,46,46,46,46,46,46,46,-20,-21,-22,-23,-24,-25,-26,-27,-28,-32,]),'BITAND':([27,28,33,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-34,47,-33,-29,-30,-31,47,47,47,47,47,47,47,47,47,47,47,47,47,-24,-25,-26,-27,-28,-32,]),'BITOR':([27,28,33,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-34,48,-33,-29,-30,-31,48,48,48,48,48,48,48,48,48,48,48,48,48,-24,-25,-26,-27,-28,-32,]),'BITXOR':([27,28,33,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-34,49,-33,-29,-30,-31,49,49,49,49,49,49,49,49,49,49,49,49,49,-24,-25,-26,-27,-28,-32,]),'LSHIFT':([27,28,33,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-34,50,-33,-29,-30,-31,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-27,-28,-32,]),'RSHIFT':([27,28,33,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[-34,51,-33,-29,-30,-31,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-27,-28,-32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'module':([0,],[1,]),'port_list':([4,],[5,]),'port':([4,10,],[6,14,]),'module_items':([13,],[15,]),'module_item':([13,15,],[16,22,]),'wire_declaration':([13,15,],[17,17,]),'assignment':([13,15,],[18,18,]),'expression':([26,29,30,31,32,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,],[28,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> MODULE IDENTIFIER LPAREN port_list RPAREN SEMI module_items ENDMODULE','module',8,'p_module','parser.py',45),
  ('port_list -> port','port_list',1,'p_port_list','parser.py',57),
  ('port_list -> port_list COMMA port','port_list',3,'p_port_list','parser.py',58),
  ('port -> INPUT IDENTIFIER','port',2,'p_port','parser.py',73),
  ('port -> OUTPUT IDENTIFIER','port',2,'p_port','parser.py',74),
  ('module_items -> module_item','module_items',1,'p_module_items','parser.py',81),
  ('module_items -> module_items module_item','module_items',2,'p_module_items','parser.py',82),
  ('module_item -> wire_declaration','module_item',1,'p_module_item','parser.py',97),
  ('module_item -> assignment','module_item',1,'p_module_item','parser.py',98),
  ('wire_declaration -> WIRE IDENTIFIER SEMI','wire_declaration',3,'p_wire_declaration','parser.py',102),
  ('assignment -> ASSIGN IDENTIFIER EQ expression SEMI','assignment',5,'p_assignment','parser.py',109),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',113),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',114),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',115),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',116),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',117),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',118),
  ('expression -> expression EQEQ expression','expression',3,'p_expression_binop','parser.py',119),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','parser.py',120),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',121),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',122),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',123),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',124),
  ('expression -> expression BITAND expression','expression',3,'p_expression_binop','parser.py',125),
  ('expression -> expression BITOR expression','expression',3,'p_expression_binop','parser.py',126),
  ('expression -> expression BITXOR expression','expression',3,'p_expression_binop','parser.py',127),
  ('expression -> expression LSHIFT expression','expression',3,'p_expression_binop','parser.py',128),
  ('expression -> expression RSHIFT expression','expression',3,'p_expression_binop','parser.py',129),
  ('expression -> MINUS expression','expression',2,'p_expression_unop','parser.py',145),
  ('expression -> NOT expression','expression',2,'p_expression_unop','parser.py',146),
  ('expression -> BITNOT expression','expression',2,'p_expression_unop','parser.py',147),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',151),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',155),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',159),
]
